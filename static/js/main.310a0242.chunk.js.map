{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","for","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","console","log","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.310a0242.chunk.js","sourcesContent":["//This is a react function based component(rfc)\r\n//props --> properties ( read only in the component )\r\n//Components file name --> Capital\r\nimport React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n//impt\r\n\r\n//rfc --> React function based component\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n                        <label className =\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n//prop types\r\n//so that you do not enter a wrong type of value for the prop\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired,\r\n}\r\n\r\n//default props-->if i do not pass values to the props then use these as the default values\r\nNavbar.defaultProps = {\r\n    title: 'Set your title here',\r\n    aboutText: 'About text here',\r\n}\r\n\r\n","import React, { useState } from 'react'  //useState hook helps to make a state variable\r\n\r\nexport default function TextForm(props) {\r\n\r\n    //event handler\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to UpperCase','success');\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Converted to LowerCase','success');\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText ='';\r\n        setText(newText);\r\n        props.showAlert('Text cleared','success');\r\n    }\r\n    //updating the text as soon as someone types in the textarea \r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    //copy the text in the textarea\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        console.log(text)\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('Text Copied','success');\r\n    }\r\n    //removing extra spaces\r\n    const handleExtraSpaces = ()=>{\r\n        //one or more than one space characters\r\n        let newText = text.split(/[ ]+/);\r\n        //then join with one space character\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('Extra spaces removed','success');\r\n    }\r\n\r\n     //text --> state variable\r\n     const [text, setText] = useState('');\r\n     // text = \"new text\"; //wrong way to change the state\r\n     // setText(\"new text\");  //correct way\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n{/* onChange event so  that we can write inside the text area */}\r\n{/* in style the first brackets are for js and second since we are making an object */}\r\n                <textarea className=\"form-control\" style={{backgroundColor: props.mode === 'dark'?'#373737':'white',\r\n            color: props.mode === 'dark'?'white':'black'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h2>Your text summary</h2>\r\n            {/* text.split --> splits characters with space */}\r\n            {console.log(text.split(\" \"))}\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0 ? text : 'Enter text to preview here'}</p>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            {/* && --> if props.alert==false(null) then the thing ahead will not be evaluated (JSX will be converted to JavaScript calls)*/}\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';  ///imrs\nimport './App.css';\nimport Navbar from './components/Navbar.js';\nimport TextForm from './components/TextForm.js';\n// import About from './components/About.js';\nimport Alert from './components/Alert';\n//react-router-dom\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\nfunction App() {\n\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null); //alert is an object\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000)\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#373737';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      {/* here the title is a prop that is being passed*/}\n      <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* react does partial matching so use exact */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n          {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}